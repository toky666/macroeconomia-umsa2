{"version":3,"file":"extensions-moment-adapter.mjs","sources":["../../../projects/extensions-moment-adapter/adapter/moment-datetime-adapter.ts","../../../projects/extensions-moment-adapter/adapter/moment-datetime-formats.ts","../../../projects/extensions-moment-adapter/adapter/index.ts","../../../projects/extensions-moment-adapter/extensions-moment-adapter.ts"],"sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE } from '@angular/material/core';\nimport {\n  MAT_MOMENT_DATE_ADAPTER_OPTIONS,\n  MatMomentDateAdapterOptions,\n} from '@angular/material-moment-adapter';\nimport { DatetimeAdapter } from '@ng-matero/extensions/core';\n\nimport * as _moment from 'moment';\nimport { Moment } from 'moment';\n\nconst moment = 'default' in _moment ? (_moment as any).default : _moment;\n\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n@Injectable()\nexport class MomentDatetimeAdapter extends DatetimeAdapter<Moment> {\n  private _localeData!: {\n    firstDayOfWeek: number;\n    longMonths: string[];\n    shortMonths: string[];\n    dates: string[];\n    hours: string[];\n    minutes: string[];\n    longDaysOfWeek: string[];\n    shortDaysOfWeek: string[];\n    narrowDaysOfWeek: string[];\n  };\n\n  private _useUtc = false;\n\n  constructor(\n    @Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string,\n    @Optional()\n    @Inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS)\n    matMomentAdapterOptions: MatMomentDateAdapterOptions,\n    _delegate: DateAdapter<Moment>\n  ) {\n    super(_delegate);\n    this.setLocale(matDateLocale || moment.locale());\n    this._useUtc = matMomentAdapterOptions.useUtc!;\n  }\n\n  setLocale(locale: string) {\n    super.setLocale(locale);\n\n    const momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, i => super.createDate(2017, 0, i + 1).format('D')),\n      hours: range(24, i => this.createDatetime(2017, 0, 1, i, 0).format('H')),\n      minutes: range(60, i => this.createDatetime(2017, 0, 1, 1, i).format('m')),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n    };\n  }\n\n  getHour(date: Moment): number {\n    return super.clone(date).hour();\n  }\n\n  getMinute(date: Moment): number {\n    return super.clone(date).minute();\n  }\n\n  isInNextMonth(startDate: Moment, endDate: Moment): boolean {\n    const nextMonth = this.getDateInNextMonth(startDate);\n    return super.sameMonthAndYear(nextMonth, endDate);\n  }\n\n  createDatetime(year: number, month: number, date: number, hour: number, minute: number): Moment {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    if (hour < 0 || hour > 23) {\n      throw Error(`Invalid hour \"${hour}\". Hour has to be between 0 and 23.`);\n    }\n\n    if (minute < 0 || minute > 59) {\n      throw Error(`Invalid minute \"${minute}\". Minute has to be between 0 and 59.`);\n    }\n\n    let result = moment({ year, month, date, hour, minute });\n    if (this._useUtc) {\n      result = result.utc();\n    }\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  getFirstDateOfMonth(date: Moment): Moment {\n    return super.clone(date).startOf('month');\n  }\n\n  getHourNames(): string[] {\n    return this._localeData.hours;\n  }\n\n  getMinuteNames(): string[] {\n    return this._localeData.minutes;\n  }\n\n  addCalendarHours(date: Moment, hours: number): Moment {\n    return super.clone(date).add({ hours });\n  }\n\n  addCalendarMinutes(date: Moment, minutes: number): Moment {\n    return super.clone(date).add({ minutes });\n  }\n\n  deserialize(value: any): Moment | null {\n    return this._delegate.deserialize(value);\n  }\n\n  private getDateInNextMonth(date: Moment) {\n    return super.clone(date).date(1).add({ month: 1 });\n  }\n}\n","import { MtxDatetimeFormats } from '@ng-matero/extensions/core';\n\nexport const MTX_MOMENT_DATETIME_FORMATS: MtxDatetimeFormats = {\n  parse: {\n    dateInput: 'L',\n    monthInput: 'MMMM',\n    yearInput: 'YYYY',\n    datetimeInput: 'L LT',\n    timeInput: 'LT',\n  },\n  display: {\n    dateInput: 'L',\n    monthInput: 'MMMM',\n    yearInput: 'YYYY',\n    datetimeInput: 'L LT',\n    timeInput: 'LT',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n    popupHeaderDateLabel: 'ddd, DD MMM',\n  },\n};\n","import { NgModule } from '@angular/core';\nimport { MatMomentDateModule, MomentDateModule } from '@angular/material-moment-adapter';\nimport { DatetimeAdapter, MTX_DATETIME_FORMATS } from '@ng-matero/extensions/core';\nimport { MomentDatetimeAdapter } from './moment-datetime-adapter';\nimport { MTX_MOMENT_DATETIME_FORMATS } from './moment-datetime-formats';\n\nexport * from './moment-datetime-adapter';\nexport * from './moment-datetime-formats';\n\n@NgModule({\n  imports: [MomentDateModule],\n  providers: [\n    {\n      provide: DatetimeAdapter,\n      useClass: MomentDatetimeAdapter,\n    },\n  ],\n})\nexport class MomentDatetimeModule {}\n\n@NgModule({\n  imports: [MatMomentDateModule, MomentDatetimeModule],\n  providers: [{ provide: MTX_DATETIME_FORMATS, useValue: MTX_MOMENT_DATETIME_FORMATS }],\n})\nexport class MtxMomentDatetimeModule {}\n\n/**\n * @deprecated Use `MtxMomentDatetimeModule` instead.\n */\nexport const MatMomentDatetimeModule = MtxMomentDatetimeModule;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}