import { Inject, Injectable, InjectionToken } from '@angular/core';
import { BehaviorSubject, from, of } from 'rxjs';
import { catchError, every, first, map, mergeAll, mergeMap, switchMap } from 'rxjs/operators';
import { isBoolean, isFunction, isPromise, transformStringToArray } from '../utils/utils';
import * as i0 from "@angular/core";
import * as i1 from "../store/roles.store";
import * as i2 from "./permissions.service";
export const USE_ROLES_STORE = new InjectionToken('USE_ROLES_STORE');
export class NgxRolesService {
    constructor(isolate = false, rolesStore, permissionsService) {
        this.isolate = isolate;
        this.rolesStore = rolesStore;
        this.permissionsService = permissionsService;
        this.rolesSource = this.isolate ? new BehaviorSubject({}) : this.rolesStore.rolesSource;
        this.roles$ = this.rolesSource.asObservable();
    }
    addRole(name, validationFunction) {
        const roles = {
            ...this.rolesSource.value,
            [name]: { name, validationFunction }
        };
        this.rolesSource.next(roles);
    }
    addRoleWithPermissions(name, permissions) {
        this.permissionsService.addPermission(permissions);
        this.addRole(name, permissions);
    }
    addRoles(rolesObj) {
        Object.keys(rolesObj).forEach((key, index) => {
            this.addRole(key, rolesObj[key]);
        });
    }
    addRolesWithPermissions(rolesObj) {
        Object.keys(rolesObj).forEach((key, index) => {
            this.addRoleWithPermissions(key, rolesObj[key]);
        });
    }
    flushRoles() {
        this.rolesSource.next({});
    }
    flushRolesAndPermissions() {
        this.flushRoles();
        this.permissionsService.flushPermissions();
    }
    removeRole(roleName) {
        const roles = {
            ...this.rolesSource.value
        };
        delete roles[roleName];
        this.rolesSource.next(roles);
    }
    getRoles() {
        return this.rolesSource.value;
    }
    getRole(name) {
        return this.rolesSource.value[name];
    }
    hasOnlyRoles(names) {
        const isNamesEmpty = !names || (Array.isArray(names) && names.length === 0);
        if (isNamesEmpty) {
            return Promise.resolve(true);
        }
        names = transformStringToArray(names);
        return Promise.all([this.hasRoleKey(names), this.hasRolePermission(this.rolesSource.value, names)])
            .then(([hasRoles, hasPermissions]) => {
            return hasRoles || hasPermissions;
        });
    }
    hasRoleKey(roleName) {
        const promises = roleName.map((key) => {
            const hasValidationFunction = !!this.rolesSource.value[key] &&
                !!this.rolesSource.value[key].validationFunction &&
                isFunction(this.rolesSource.value[key].validationFunction);
            if (hasValidationFunction && !isPromise(this.rolesSource.value[key].validationFunction)) {
                const validationFunction = this.rolesSource.value[key].validationFunction;
                const immutableValue = { ...this.rolesSource.value };
                return of(null).pipe(map(() => validationFunction(key, immutableValue)), switchMap((promise) => isBoolean(promise) ?
                    of(promise) : promise), catchError(() => of(false)));
            }
            return of(false);
        });
        return from(promises).pipe(mergeAll(), first((data) => data !== false, false), map((data) => data !== false)).toPromise().then((data) => data);
    }
    hasRolePermission(roles, roleNames) {
        return from(roleNames).pipe(mergeMap((key) => {
            if (roles[key] && Array.isArray(roles[key].validationFunction)) {
                return from(roles[key].validationFunction).pipe(mergeMap((permission) => this.permissionsService.hasPermission(permission)), every(hasPermission => hasPermission === true));
            }
            return of(false);
        }), first(hasPermission => hasPermission === true, false)).toPromise();
    }
}
NgxRolesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: NgxRolesService, deps: [{ token: USE_ROLES_STORE }, { token: i1.NgxRolesStore }, { token: i2.NgxPermissionsService }], target: i0.ɵɵFactoryTarget.Injectable });
NgxRolesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: NgxRolesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: NgxRolesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [USE_ROLES_STORE]
                }] }, { type: i1.NgxRolesStore }, { type: i2.NgxPermissionsService }]; } });
//# sourceMappingURL=data:application/json;base64,